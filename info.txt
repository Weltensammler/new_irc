Tasks:
	- authenticate
	- set NickName										50%
	- set Username										50%
	- join channel										done
	- send receive privmsg								done
	- operators and regular users						30%
	- implement operator commands						10%
	- assemble incomplete messages (check for /r/n)		90% should work now but only checking for newline, not \r\n
	- Verify absolutely every possible error and issue (receiving partial data, low bandwidth,
	and so forth).

	Operatorcommands
	- KILL
	- KICK
	- TOPIC
	- INVITE
	- MODE (chance ) /MODE #ch1 +or-"mode"(+t)
		modes:
			- t (only operators can change topic)
			- o (makes a user operator)
			- v (gives a user voice status, can talk even if channel is in moderation mode) ---
			- b (specified user can't access the channel)
			- i (sets channel status to invite only, only operators can invite users)
			- m (sets channel status to moderated only operators and users with voice status can send messages) ---
			- n (no external messages, messages from other channels... will be blocked) ---

			- l (set client limit to channel)
			- s (secret channel) --> channel don `t show up to lists only if the user is in this channel

	Optional
	- BAN
	- UNBAN
	


PRIVMSG:
	:Bene PRIVMSG ben@local :Hello are you receiving this message ?\r\n
	"from" "command" "to" "message"

	this is how server receives:
	PRIVMSG #ch1 Hello
	PRIVMSG #ch1 :auch so

https://stackoverflow.com/questions/43399621/join-command-for-irc-protocol
JOIN:
	/join #channelname //client format
	JOIN #channelname //reveived by server

	-Server repeats/verifies JOIN command
	:<UserJID> JOIN :<ChannelName>
	:ben JOIN :ch1


	-Server sends channel topic
	:<Domain> <[RPL_TOPIC][1]> <NickName> <ChannelName> :<Topic>
	:local 332 ben ch1 :Welcome to the channel!

	-Server sends list of users in the joined channel 
	 (which can sometime be sent in chunks, due to message size limitation on IRC).
	 :<Domain> <[RPL_NAMREPLY][1]> <NickName> = <ChannelName> : <NameList>
	 :local 353 ben = #ch1 :ben
	 :<Domain> <[RPL_ENDOFNAMES][1]> <NickName> <ChannelName> :End of Names list

KICK;
	/kick #ch1,#ch2.... bene1 bene2.... reason //hastag bei channelname ?
	"command" "channel/s" "user/s" optional reasons "als text"
	KICK Bene #ch1,#ch2 :bene1,bene2 reason
